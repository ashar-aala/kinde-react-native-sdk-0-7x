/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
 * The Oauth SDK module.
 * @module SDK/Oauth
 * @version 1.2.2
 */

import { AdditionalParameters, TokenResponse } from '../../types/KindeSDK';
import KindeSDK from '../KindeSDK';
import Storage from '../Storage';
import {
    OpenWebInApp,
    isAdditionalParameters,
    additionalParametersToLoginMethodParams
} from '../Utils';
import { AuthBrowserOptions } from '../../types/Auth';
import {
    generateAuthUrl,
    IssuerRouteTypes,
    LoginMethodParams,
    LoginOptions,
    Scopes
} from '@kinde/js-utils';

class AuthorizationCode {
    /**
     * It opens the login page in the browser.
     * @param {KindeSDK} kindSDK - The KindeSDK instance
     * @param {boolean} [usePKCE=false] - boolean = false
     * @param {'login' | 'registration'} [startPage=login] - 'login' | 'registration' = 'login'
     * @param {AdditionalParameters} additionalParameters - AdditionalParameters = {}
     * @returns A promise that resolves when the URL is opened.
     */
    async authenticate(
        kindeSDK: KindeSDK,
        startPage: 'login' | 'registration' = 'login',
        additionalParameters: LoginMethodParams | AdditionalParameters,
        options?: AuthBrowserOptions
    ): Promise<TokenResponse | null> {
        // Map additional parameters to the correct format of LoginOptions
        if (isAdditionalParameters(additionalParameters)) {
            additionalParameters =
                additionalParametersToLoginMethodParams(additionalParameters);
        }

        const authUrl = await generateAuthUrl(
            kindeSDK.issuer,
            startPage === 'login'
                ? IssuerRouteTypes.login
                : IssuerRouteTypes.register,
            {
                ...(additionalParameters as LoginMethodParams),
                prompt:
                    startPage === 'login'
                        ? IssuerRouteTypes.login
                        : IssuerRouteTypes.register,
                clientId: kindeSDK.clientId,
                redirectURL: kindeSDK.redirectUri,
                scope: kindeSDK.scope.split(' ') as Scopes[]
            }
        );

        Storage.setState(authUrl.state);
        Storage.setCodeVerifier(authUrl.codeVerifier);
        Storage.setNonce(authUrl.nonce);
        Storage.setCodeChallenge(authUrl.codeChallenge);

        return OpenWebInApp(authUrl.url.toString(), kindeSDK, options);
    }
}

export default AuthorizationCode;
